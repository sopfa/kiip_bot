import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor
from datetime import datetime, timedelta
import json

API_TOKEN = '7832882030:AAHRw7sa2yFisyv5SAypaExIeTt2-oKl1Ss'

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ª–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞
with open("lessons.json", "r", encoding="utf-8") as f:
    lessons = json.load(f)

user_data = {}

main_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
main_keyboard.add(KeyboardButton("üìñ –£—á–∏—Ç—å —Å–ª–æ–≤–∞"), KeyboardButton("üîÅ –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ"))
main_keyboard.add(KeyboardButton("üìö –í—ã–±—Ä–∞—Ç—å —É—Ä–æ–∫"))

@dp.message_handler(commands=["start"])
async def send_welcome(message: types.Message):
    user_data[message.from_user.id] = {"mode": "learn", "lesson": "1", "index": 0}
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —É—á–∏—Ç—å —Å–ª–æ–≤–∞ –∏–∑ KIIP 3. –í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å –¥–µ–ª–∞—Ç—å:", reply_markup=main_keyboard)

@dp.message_handler(lambda m: m.text == "üìö –í—ã–±—Ä–∞—Ç—å —É—Ä–æ–∫")
async def choose_lesson(message: types.Message):
    lesson_list = "\n".join([f"–£—Ä–æ–∫ {i}" for i in range(1, 19)])
    await message.answer(f"–ù–∞–ø–∏—à–∏ –Ω–æ–º–µ—Ä —É—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å —É—á–∏—Ç—å (1‚Äì18):\n{lesson_list}")

@dp.message_handler(lambda m: m.text.isdigit() and 1 <= int(m.text) <= 18)
async def set_lesson(message: types.Message):
    user_data[message.from_user.id] = {"mode": "learn", "lesson": message.text, "index": 0}
    await message.answer(f"‚úÖ –£—Ä–æ–∫ {message.text} –≤—ã–±—Ä–∞–Ω. –ù–∞–ø–∏—à–∏ 'üìñ –£—á–∏—Ç—å —Å–ª–æ–≤–∞', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")

@dp.message_handler(lambda m: m.text == "üìñ –£—á–∏—Ç—å —Å–ª–æ–≤–∞")
async def learn_words(message: types.Message):
    user_id = message.from_user.id
    if user_id not in user_data:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —É—Ä–æ–∫ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã 'üìö –í—ã–±—Ä–∞—Ç—å —É—Ä–æ–∫'.")
        return
    data = user_data[user_id]
    lesson = data["lesson"]
    index = data["index"]
    word_list = lessons[lesson]
    if index >= len(word_list):
        await message.answer("üéâ –¢—ã –≤—ã—É—á–∏–ª –≤—Å–µ —Å–ª–æ–≤–∞ –≤ —ç—Ç–æ–º —É—Ä–æ–∫–µ!")
        return
    entry = word_list[index]
    question = f"üìå –°–ª–æ–≤–æ: {entry['word']}

üí¨ –ü—Ä–∏–º–µ—Ä: {entry['example']}

(–û—Ç–≤–µ—Ç –ø–æ—è–≤–∏—Ç—Å—è —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...)"
    await message.answer(question)
    await asyncio.sleep(5)
    answer = f"üìñ –ü–µ—Ä–µ–≤–æ–¥: {entry['translation']}
üìò –ü–µ—Ä–µ–≤–æ–¥ –ø—Ä–∏–º–µ—Ä–∞: {entry['example_translation']}"
    user_data[user_id]["index"] += 1
    await message.answer(answer)

@dp.message_handler(lambda m: m.text == "üîÅ –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ")
async def review_words(message: types.Message):
    await message.answer("üîÅ –§—É–Ω–∫—Ü–∏—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏.")

if __name__ == '__main__':
    import asyncio
    asyncio.run(dp.start_polling())